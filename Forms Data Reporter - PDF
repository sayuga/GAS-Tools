/////////////////////////////////////////////////////////////////
///Programmer: Jonathan Vargas                                ///
///Contact: jonathan.vargas0@gmail.com                        ///
///Date: 5/2/2016  Version: 2.0                               ///
///                                                           ///
///Description:                                               ///
///                                                           ///
/// The script will pull the data filtered into the DataMerge ///
///tab, associate data descriptors (Charts/Images) and then   ///
///replace the appropiate docs template tags with the values  ///
///found in the spreadsheet.                                  ///
///                                                           ///
///Pending Updates:                                           ///
///  + Consistent Chart/Image reference                       ///
///  + incode Chart Build                                     ///
///  + UI Interface                                           ///
///  + In Sheet Trigger control                               ///
///  + In Script Documentation Cleanup                        ///
///                                                           ///
/////////////////////////////////////////////////////////////////

//
//UI Menu
//

function onOpen()
{
  var ui = SpreadsheetApp.getUi();
   ui.createMenu('Script Runner')
   .addItem('Run Report Builder V2', 'projectBuilder2')
   .addToUi();  
};



//
//MAIN BUILDING PROFILE FOR REPORT
//
function projectBuilder2() 
{    
  var source = SpreadsheetApp.getActiveSpreadsheet() 

  ////ACCESS CONTROL SHEET - !!!!!INITIAL EVENT!!!!!////
  var templateSheetsSource = "Control";    
  var templateSheet = source.getSheetByName(templateSheetsSource); //Location of Building Blocks
 
  ////DOCUMENT ELEMENTS//// 
  var docName = templateSheet.getRange("B2").getValue();  //Document name
  
  ////EMAIL ELEMENTS////
  var sendTo = templateSheet.getRange("B4").getValue(); //Who is receiving it
  var sendSubject = templateSheet.getRange("B5").getValue(); //Email Subject 
  var sendBody = templateSheet.getRange("A7").getValue(); //Intro for Email Body
  
  ////DATA ELEMENTS///
  var dataSheetName = templateSheet.getRange("B9").getValue(); //Data Sheet Name 
  var fCol = templateSheet.getRange("B10").getValue();//first column where data starts
  var fRow = templateSheet.getRange("D10").getValue();//first Row where data starts  
  var numEntries = templateSheet.getRange("F10").getValue(); //number of Form entries
  
  ////GOOGLE ID's////
  var GIDArchive = templateSheet.getRange("F16").getValue(); //Destination folder ID - Archive Folder Google ID  
  var GIDTemplate = templateSheet.getRange("F17").getValue(); //DocSource2 - Report Template
  var GIDLetterHead = templateSheet.getRange("F19").getValue(); //DocSource - LetterHead
  var GIDLogo = templateSheet.getRange("F20").getValue(); //ImgSource - Logo
  
  
  ////CHART DATA////
  var chartName = {};
  chartName[0] = templateSheet.getRange("A23").getValue(); //Chart 1 Sheet Name
  chartName[1]  = templateSheet.getRange("A24").getValue(); //Chart 2 Sheet Name
  chartName[2]  = templateSheet.getRange("A25").getValue(); //Chart 3 Sheet Name
  chartName[3]  = templateSheet.getRange("A26").getValue(); //Chart 4 Sheet Name
  chartName[4]   = templateSheet.getRange("A27").getValue(); //Chart 5 Sheet Name
  var chartOne = source.getSheetByName(chartName[0]).getCharts();
  var chartTwo = source.getSheetByName(chartName[1]).getCharts();
  var chartThree = source.getSheetByName(chartName[2]).getCharts();
  var chartFour = source.getSheetByName(chartName[3]).getCharts();
  var chartFive = source.getSheetByName(chartName[4]).getCharts();

 
  ////GENERAL FORMAT////
  var style = {};
  style[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] = DocumentApp.HorizontalAlignment.CENTER;
    
  
  ////DOCUMENT BUILDER////
  if (numEntries > 0) //Checks entry count to designate to run or not.
  {    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /////////////CREATE COPY FROM TEMPLATE IN ARCHIVE//////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    
    var destFolder = DriveApp.getFolderById(GIDArchive); //Designate Folder destination
    var copyDoc = DriveApp.getFileById(GIDLetterHead).makeCopy(docName, destFolder); //Copy template to folder   
    var newDocID = copyDoc.getId(); // New Document ID 
    var newDoc = DocumentApp.openById(newDocID);
    var newBody = newDoc.getBody(); //new Document Body
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /////////////CREATE DATA OBJECT FROM ENTRIES FOUND ////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
      
    var dataSheet = source.getSheetByName(dataSheetName); //Open sheet containing data to merge
    var numRows = dataSheet.getLastRow();//gets last row with data in sheet
    //var numRows = dataSheet.getMaxRows() -1; //Gets maximum number of rows in sheet minus header
    //var numColumns = dataSheet.getMaxColumns(); //Gets maximum number of columns in sheet     
    var numColumns = dataSheet.getLastColumn();  //Gets last column with data in sheet      
    var dataRange = dataSheet.getRange(fRow, fCol, numRows, numColumns);//Designates Range of data
    var object = dataRange.getValues(); //Pulls values in the range as an Array       
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /////////////PHYSICAL BUILD OF DOCUMENT - COPY TEMPLATE AND REPLACE TAGS LOOP//////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////    
    
    for (var i = 0; i < numEntries; ++i) //Adds pages for elements according to the total number of entries calculated. 
    { 
      newBody.appendPageBreak();
      
      var templateBody = DocumentApp.openById(GIDTemplate).getBody();//Gets template body
      var totalElements = templateBody.getNumChildren(); //Child Index for template file  
      
      ///////////////////////////////////////////////////////////////////////////////////////////////
      /////////////COPIES TEMPLATE INTO NEW DOCUMENT WITH KEY TAG DESCRIPTIORS///////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////////
      for( var j = 0; j < totalElements; ++j ) //Checks against all elemnt types and appends accordingly.
      {    
        var element = templateBody.getChild(j).copy();
        var type = element.getType();    
        
        if( type == DocumentApp.ElementType.PARAGRAPH ) //copies paragraph objects
        {newBody.appendParagraph(element);}
        
        else if( type == DocumentApp.ElementType.TABLE)//copies table objects
        {newBody.appendTable(element);} 
      
        else if( type == DocumentApp.ElementType.HORIZONTAL_RULE) //copies horizontal rule objects
        {newBody.appendHorizontalRule();}
      } 

      ///////////////////////////////////////////////////////////////////////////////////////////////
      /////////////REPLACES TAG DESCRIPTIORS WITH SPREADSHEET VALUES      ///////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////////
      
      var myData = object[i]; //Looks at specific data set from object array
      
      ////////////////Tag Definer //////////////////
      var c = {};
      var y = "{Field";
      var z = "}";
      
      for (var tagNum = 0; tagNum < myData.length; tagNum++)
      {c[tagNum]  = y + tagNum + z;} // compiles: "{Field" + # + "}" into {Field#}
      
       ////Chart Counters////
      var aA = 0;
      var aB = 0;      
      var aC = 0;      
      var aD = 0;      
      var aE = 0;  
      
      /////////////////Data Identifier & Merger /////////////////////////////
      
      for (var q = 0; q <myData.length; q++)
      { 
        if (myData[q] == "Image") //Image Check
        {
          var fileId = myData[q+1]; //Gets GID for image
          var tag = c[q]; //current tag
          
          if (fileId == "")
          {fileId = GIDLogo;} //Default Image ID if none present
          
          var blob = DriveApp.getFileById(fileId).getBlob(); //gets image blob  
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            var clearTag = newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob).setAttributes(style); //adds image at tag location using set "style"            
          }      
        }
        else if (myData[q] == chartName[0]) //Chart 1 Check
        {  
          var tag =c[q];
          var chart = chartOne[aA];
          var blob = chart.getBlob();
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {        
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob); //adds image at tag location using set "style"
          } 
          
          aA++;
        } 
        else if (myData[q] == chartName[1]) //Chart 2 Check
        {      
          var tag =c[q];               
          var chart = chartTwo[aB];          
          var blob = chart.getBlob();
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob); //adds image at tag location using set "style"
          } 
          
          aB++;
        } 
        else if (myData[q] == chartName[2]) //Chart 3 Check
        {      
          var tag =c[q];                  
          var chart = chartThree[aC];          
          var blob = chart.getBlob();
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob); //adds image at tag location using set "style"
          } 
          
          aC++;
        } 
        else if (myData[q] == chartName[3]) //Chart 4 Check
        {      
          var tag =c[q];
          var chart = chartFour[aD];          
          var blob = chart.getBlob();
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob); //adds image at tag location using set "style"
          } 
          
          aD++;
        } 
        else if (myData[q] == chartName[4]) //Chart 5 Check
        {      
          var tag =c[q];         
          var chart = chartFive[aE];          
          var blob = chart.getBlob();
          
          if (newBody.findText(tag) != null) //makes sure tag exists
          {
            var replacedParent = newBody.findText(tag).getElement().getParent().asParagraph(); //gets tag location
            newBody.replaceText(tag, ""); //removes tag
            
            replacedParent.appendInlineImage(blob); //adds image at tag location using set "style"
          } 
          
          aE++;
        } 
        else
        { 
          var tag = c[q];
          var currentData = myData[q];
          if (newBody.findText(tag) != null)
          {
            if (currentData != "")
            {newBody.replaceText(tag, currentData);}
            else
            {newBody.replaceText(tag, "");}
          }
        }        
      } 
    }      
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////SAVE FILE, PUT IT IN A BOW AND MAIL IT OUT ////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    newDoc.saveAndClose();   
    var file = DriveApp.getFileById(newDocID); //new document in PDF format to attach to email  
    
    MailApp.sendEmail(sendTo, sendSubject, sendBody,{attachments:[file]}); //sends final email according to template and attaches newset document.       
  }
}
